(setq i 2)
.
(setq d 0.3333333333333333)
.
(setq pitches '(440 466.164 493.883 523.251 554.365 587.33 622.254 659.255 698.456 739.989 783.991 830.609))
.
(setq notes '((a1 1) (b1 3) (c1 4) (d1 6) (e1 8) (f1 9) (g1 11)
			(a2 13) (b2 15) (c2 16) (d2 18) (e2 20) (f2 21) (g2 23)
			(a3 25)))
.
(setq phrase1 '(b1 c1 d1 (e1 3) d1 e1 a2 g1 e1 d1 c1 (a1 3)))
.
(setq phrase2 '(c1 e1 f1 (g1 3) a2 g1 e1 c1 e1 (d1 5)))
.
(setq phrase3 '(b1 c1 d1 (e1 3) f1 e1 d1 c1 d1 (c1 5)))
.
(setq phrase4 '(g1 a2 b2 (c2 3) b2 b2 a2 g1 e1 g1 e1 (c1 3)))
.
(setq phrase5 '(g1 a2 b2 (c2 3) b2 b2 a2 g1 e1 (d1 5)))
.
(setq phrase6 '(g1 g1 g1 (e2 3) d2 d2 c2 a2 c2 g1 e1 (c1 3)))
.
(setq phrase7 '(b1 c1 d1 e1 a2 g1 e1 d1 c1 a1 b1 (c1 5)))
.
(setq tune (append phrase1 phrase2 phrase1 phrase3 phrase4 phrase5 phrase6 phrase7))
.
(defun maplist (fn l)
	(if (eq l nil) (funcall fn nil)
		(cons (funcall fn (car l)) (maplist fn (cdr l)))))
.
(defun expand (i p d)
	(cond
		((eq p nil) (list nil))
		((listp p) (list i (car p) (* d (cadr p))))
		(t (list i p d))))
.
(defun nth (n l)
	(if (eq l nil) nil
		(if (= n 1) (car l)
			(nth (- n 1) (cdr l)))))
.
(defun pitch (p) (nth p pitches))
.
(defun pitcho (p) (if (< p 13) (pitch p) (* 2 (pitcho (- p 12)))))
.
(defun pitchn (n) (cons (car n) (cons (pitcho (cadr n)) (cddr n))))
.
(defun pitchl (ns) (if (eq ns nil) nil (cons (pitchn (car ns)) (pitchl (cdr ns)))))
.
(defun lookup (map key) (if (eq map nil) nil (if (eq (car (car map)) key) (car (cdr (car map)))
					(lookup (cdr map) key))))
.
(defun note (n) (cons (car n) (cons (lookup notes (cadr n)) (cddr n))))
.
(defun notel (ns) (if (eq ns nil) nil (cons (note (car ns)) (notel (cdr ns)))))
.
(defun expandl (i ps d) (if (eq ps nil) nil (cons (expand i (car ps) d) (expandl i (cdr ps) d))))
.
(setq tuneD (expandl i tune d))
.
(setq tuneP (pitchl (notel tuneD)))
.
(setq tuneC (list tuneP))
.