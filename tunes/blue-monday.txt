(setq d 0.22)
.
(defun repeat (n l)
	(if (<= n 0)
		nil
		(cons l (repeat (- n 1) l))))
.
(defun repeat-app (n l)
	(if (<= n 0)
		nil
		(append l (repeat-app (- n 1) l))))
.
(setq pitches '(440 466.164 493.883 523.251 554.365 587.33 622.254 659.255 698.456 739.989 783.991 830.609))
.
(setq notes '(
			(a1 1) (b1 3) (c1 4) (d1 6) (e1 8) (f1 9) (g1 11)
			(a2 13) (b2 15) (c2 16) (d2 18) (e2 20) (f2 21) (g2 23)
			(a3 25) (b3 27) (c3 28) (d3 30) (e3 32) (f3 33) (g3 35)
			(x 0)))
.
(setq phr-drums
	(append
		(repeat-app 2 '((a1 0.5) (x 1.5)))
		(repeat-app 8 '((a1 0.25) (x 0.25)))
		(repeat-app 4 '((a1 0.5) (x 1.5)))
	))
.
(setq phr-tuneA '(c2 x c2 d2 g1 x g1 a2 x a2 a2 a2 a2 x a2 x))
.
(setq phr-tuneB '(d2 x d2 d2 g1 x g1 a2 x a2 a2 a2 a2 x a2 x))
.
(setq phr-bassA '(c2 c3 c2 c3 g1 g2 g1 g2 a2 a3 a2 a3 a2 a3 a2 a3))
.
(setq phr-bassB '(d2 d3 d2 d3 g1 g2 g1 g2 a2 a3 a2 a3 a2 a3 a2 a3))
.
(setq phr-0 '((x 16)))
.
(setq seq-drums (repeat-app 6 phr-drums))
.
(setq seq-tune (append (repeat-app 2 phr-0) (repeat-app 3 phr-tuneA) phr-tuneB))
.
(setq seq-bass (append (repeat-app 2 phr-0) (repeat-app 2 (append phr-bassA phr-bassB))))
.
(defun maplist (fn l)
	(if (eq l nil) (funcall fn nil)
		(cons (funcall fn (car l)) (maplist fn (cdr l)))))
.
(defun expand (i p d)
	(cond
		((eq p nil)
			(list 0 0 0))
		((and (listp p) (eq (car p) 'x))
			(list 0 0 (* d (cadr p))))
		((listp p)
			(list i (car p) (* d (cadr p))))
		((eq p 'x)
			(list 0 0 d))
		(t (list i p d))))
.
(defun nth (n l)
	(if (eq l nil) nil
		(if (= n 1) (car l)
			(nth (- n 1) (cdr l)))))
.
(defun pitch (p) (if (= p 0) 0 (nth p pitches)))
.
(defun pitcho (p)
	(if (eq p nil)
		0
		(if (< p 13) (pitch p) (* 2 (pitcho (- p 12))))))
.
(defun pitchn (n) (list (first n) (pitcho (second n)) (third n)))
.
(defun pitchl (ns) (if (eq ns nil) nil (cons (pitchn (car ns)) (pitchl (cdr ns)))))
.
(defun lookup (map key) (if (eq map nil) nil (if (eq (car (car map)) key) (car (cdr (car map)))
					(lookup (cdr map) key))))
.
(defun note (n)
	(list (first n) (lookup notes (second n)) (third n)))
.
(defun notel (ns) (if (eq ns nil) nil (cons (note (car ns)) (notel (cdr ns)))))
.
(defun expandl (i ps d)
	(if (eq ps nil)
		nil
		(cons (expand i (car ps) d) (expandl i (cdr ps) d))))
.
(setq ch-drums (pitchl (notel (expandl 3 seq-drums d))))
.
(setq ch-tune (pitchl (notel (expandl 5 seq-tune d))))
.
(setq ch-bass (pitchl (notel (expandl 6 seq-bass d))))
.
(setq channels (list ch-drums ch-tune ch-bass))
.
